data = pd.read_csv('sample.csv')
print(data[:,1:])
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
data = pd.read_csv('sample.csv')
print(data[:,1])
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
data = pd.read_csv('sample.csv')
print(data[1])
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
data = pd.read_csv('sample.csv')
print(data[:])
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
data = pd.read_csv('sample.csv')
print(data[1])
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
data = pd.read_csv('sample.csv')
print(data[0])
quit
import pandas as pd
reticulate::repl_python()
import sympy as sp
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
data = pd.read_csv('sample.csv')
print(data[:,1])
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
data = pd.read_csv('sample.csv')
print(data.iloc[:1])
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
data = pd.read_csv('sample.csv')
print(data.iloc[:,1:])
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
data = pd.read_csv('sample.csv')
mydata = data.iloc[:,1:]
print(mydata)
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
data = pd.read_csv('sample.csv')
mydata = data.iloc[:,1:]
mydata = la.inv(mydata)
print(mydata)
quit
import pandas as pd
reticulate::repl_python()
import sympy as sp
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
data = pd.read_csv('sample.csv')
dataT = np.transpose(data)
print(data)
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
data = pd.read_csv('sample.csv')
dataT = np.transpose(data.iloc[:,1:])
print(data)
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
data = pd.read_csv('sample.csv')
dataT = np.transpose(data.iloc[:,1:])
print(dataT)
exit
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
# Method 1
M = sp.Matrix([
[1, 2, 3, 1250],
[2, 1, 4, 1800],
[0, 1, 1, 300]
])
M.rref()
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
print(data)
quit
reticulate::repl_python()
## Swap rows and columns to fit system of linear equations mold
aT = np.transpose(data.iloc[:, 1:])
aT = np.matrix(aT)
print(aT)
b = np.array([1250, 1800, 300])
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
aT = np.transpose(data.iloc[:, 1:])
print(aT)
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
# Method 1
M = sp.Matrix([
[1, 2, 3, 1250],
[2, 1, 4, 1800],
[0, 1, 1, 300]
])
M.rref()
quit
reticulate::repl_python()
import numpy as np
A = np.matrix([[1, 2],
[5, 6]])
B = np.matrix([[5, 4],
[1, 1]])
np.add(A, B)
quit
reticulate::repl_python()
import pandas as pd
import sympy as sp
import numpy.linalg as la
# Method 1
M = sp.Matrix([
[1, 2, 3, 1250],
[2, 1, 4, 1800],
[0, 1, 1, 300]
])
M.rref()
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
aT = np.transpose(data.iloc[:, 1:])
print(aT)
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
aT = np.transpose(data.iloc[:, 1:])
print(aT)
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
aT = np.transpose(data.iloc[:, 1:])
print(aT[:, 3])
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
aT = np.transpose(data.iloc[:, 1:])
print(aT[:, 2])
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
aT = np.transpose(data.iloc[:, 1:])
print(aT[:,:3])
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
aT = np.transpose(data.iloc[:, 1:])
print(aT[:, 0])
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
aT = np.transpose(data.iloc[:, 1:])
print(aT[:, 3:])
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
aT = np.transpose(data.iloc[:, 1:])
print(aT.iloc[:, 3])
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
print(data)
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
aT = np.transpose(data.iloc[:, 1:])
aT = np.matrix(aT)
print(aT)
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
aT = np.transpose(data.iloc[:, 1:])
print(aT)
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
print(data)
## Swap rows and columns to fit system of linear equations mold
aT = np.transpose(data.iloc[:, 1:])
aT = np.matrix(aT)
print(aT)
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
print(data)
## Swap rows and columns to fit system of linear equations mold
aT = np.transpose(data.iloc[:, 1:])
aT = np.matrix(aT)
print(aT.iloc[:, 0:2])
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
print(data)
## Swap rows and columns to fit system of linear equations mold
aT = np.transpose(data.iloc[:, 1:])
aT = np.matrix(aT)
print(aT[:, 0:2])
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
print(data)
## Swap rows and columns to fit system of linear equations mold
aT = np.transpose(data.iloc[:, 1:])
aT = np.matrix(aT)
print(aT[:, 0:3])
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
print(data)
## Swap rows and columns to fit system of linear equations mold
aT = np.transpose(data.iloc[:, 1:])
aT = np.matrix(aT)
print(aT)
quit
reticulate::repl_python()
## Applies elementary row operations to a system of linear equations
def eroLEQ(coefficients, constraints):
A = coefficients
b = constraints
### Check if the matrix has the same number of rows and columns
if A.shape[0] == A.shape[1]:
#### la.solve only accepts square matrices in the 1st parameter
return la.solve(A, b)
else:
#### la.lstsq for non-square matrices
return la.lstsq(A, b, rcond = None)[0]
coefs = aT[:, 0:3]
const = aT[:, 4]
eroLEQ(coefs, const)
quit
reticulate::repl_python()
## Applies elementary row operations to a system of linear equations
def eroLEQ(coefficients, constraints):
A = coefficients
b = constraints
### Check if the matrix has the same number of rows and columns
if A.shape[0] == A.shape[1]:
#### la.solve only accepts square matrices in the 1st parameter
return la.solve(A, b)
else:
#### la.lstsq for non-square matrices
return la.lstsq(A, b, rcond = None)[0]
coefs = aT[:, 0:3]
const = aT[:, 3]
eroLEQ(coefs, const)
quit
reticulate::repl_python()
## Applies elementary row operations to a system of linear equations
def eroLEQ(coefficients, constraints):
A = coefficients
b = constraints
### Check if the matrix has the same number of rows and columns
if A.shape[0] == A.shape[1]:
#### la.solve only accepts square matrices in the 1st parameter
return la.solve(A, b)
else:
#### la.lstsq for non-square matrices
return la.lstsq(A, b, rcond = None)[0]
coefs = aT[:, 0:3]
const = aT[:, 3]
eroLEQ(coefs, const)
# Verify its the only unique solution
aT.rref()
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
print(data)
## Swap rows and columns to fit system of linear equations mold
aT = np.transpose(data.iloc[:, 1:])
aT = sp.matrix(aT)
print(aT)
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
print(data)
## Swap rows and columns to fit system of linear equations mold
aT = np.transpose(data.iloc[:, 1:])
aT = sp.Matrix(aT)
print(aT)
quit
reticulate::repl_python()
## Applies elementary row operations to a system of linear equations
def eroLEQ(coefficients, constraints):
A = coefficients
b = constraints
### Check if the matrix has the same number of rows and columns
if A.shape[0] == A.shape[1]:
#### la.solve only accepts square matrices in the 1st parameter
return la.solve(A, b)
else:
#### la.lstsq for non-square matrices
return la.lstsq(A, b, rcond = None)[0]
coefs = aT[:, 0:3]
const = aT[:, 3]
eroLEQ(coefs, const)
# Verify its the only unique solution
aT.rref()
exit
reticulate::repl_python()
## Applies elementary row operations to a system of linear equations
def eroLEQ(coefficients, constraints):
A = coefficients
b = constraints
### Check if the matrix has the same number of rows and columns
if A.shape[0] == A.shape[1]:
#### la.solve only accepts square matrices in the 1st parameter
return la.solve(A, b)
else:
#### la.lstsq for non-square matrices
return la.lstsq(A, b, rcond = None)[0]
coefs = np.matrix(aT[:, 0:3])
const = np.array(aT[:, 3])
eroLEQ(coefs, const)
# Verify its the only unique solution
aT.rref()
exit
reticulate::repl_python()
## Applies elementary row operations to a system of linear equations
def eroLEQ(coefficients, constraints):
A = coefficients
b = constraints
### Check if the matrix has the same number of rows and columns
if A.shape[0] == A.shape[1]:
#### la.solve only accepts square matrices in the 1st parameter
return la.solve(A, b)
else:
#### la.lstsq for non-square matrices
return la.lstsq(A, b, rcond = None)[0]
coefs = np.matrix(aT[:, 0:3])
const = aT[:, 3]
eroLEQ(coefs, const)
# Verify its the only unique solution
aT.rref()
quit
reticulate::repl_python()
## Applies elementary row operations to a system of linear equations
def eroLEQ(coefficients, constraints):
A = coefficients
b = constraints
### Check if the matrix has the same number of rows and columns
if A.shape[0] == A.shape[1]:
#### la.solve only accepts square matrices in the 1st parameter
return la.solve(A, b)
else:
#### la.lstsq for non-square matrices
return la.lstsq(A, b, rcond = None)[0]
coefs = aT[:, 0:3]
const = aT[:, 3]
eroLEQ(coefs, const)
# Verify its the only unique solution
aT.rref()
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
print(data)
## Swap rows and columns to fit system of linear equations mold
aT = np.transpose(data.iloc[:, 1:])
aT = sp.Matrix(aT)
print(aT)
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
print(data)
## Swap rows and columns to fit system of linear equations mold
aT = np.transpose(data.iloc[:, 1:])
aT = sp.Matrix(aT)
print(aT[:, 3])
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
## Swap rows and columns to fit system of linear equations mold
aT = np.transpose(data.iloc[:, 1:])
aT = sp.Matrix(aT)
print(aT[:, 3])
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
## Swap rows and columns to fit system of linear equations mold
aT = np.transpose(data.iloc[:, 1:])
aT = np.matrix(aT)
print(aT[:, 3])
quit
reticulate::repl_python()
# Method 2
data = pd.read_csv('sample.csv')
print(data)
## Swap rows and columns to fit system of linear equations mold
aT = np.transpose(data.iloc[:, 1:])
aT = np.matrix(aT)
print(aT)
quit
reticulate::repl_python()
## Applies elementary row operations to a system of linear equations
def eroLEQ(coefficients, constraints):
A = coefficients
b = constraints
### Check if the matrix has the same number of rows and columns
if A.shape[0] == A.shape[1]:
#### la.solve only accepts square matrices in the 1st parameter
return la.solve(A, b)
else:
#### la.lstsq for non-square matrices
return la.lstsq(A, b, rcond = None)[0]
A = aT[:, 0:3]
b = aT[:, 3]
eroLEQ(A, b)
# Verify its the only unique solution
aT.rref()
quit
reticulate::repl_python()
## Applies elementary row operations to a system of linear equations
def eroLEQ(coefficients, constraints):
A = coefficients
b = constraints
### Check if the matrix has the same number of rows and columns
if A.shape[0] == A.shape[1]:
#### la.solve only accepts square matrices in the 1st parameter
return la.solve(A, b)
else:
#### la.lstsq for non-square matrices
return la.lstsq(A, b, rcond = None)[0]
A = aT[:, 0:3]
b = aT[:, 3]
eroLEQ(A, b)
# Verify its the only unique solution
aT = sp.Matrix(aT)
aT.rref()
exit
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
